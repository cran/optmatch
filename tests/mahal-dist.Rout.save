
R version 2.14.2 (2012-02-29)
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i386-apple-darwin9.8.0/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> require('optmatch')
Loading required package: optmatch
You're loading optmatch, by B. Hansen and M. Fredrickson.
 The optmatch package makes essential use of D. P. Bertsekas
 and P. Tseng's RELAX-IV algorithm and code, as well as
 Bertsekas' AUCTION algorithm and code.  Using the software
 to 'satisfy in any part commercial delivery requirements to
 government or industry' requires a special agreement with
 Dr. Bertsekas. For more information, enter
 relaxinfo() at the command line.

> data(nuclear, package="boot")
> mahal.dist(pr~cap, nuclear)
$m
       1      2      4      6       7     8    10    11    12  13     14    15
3  4.000 0.0000 0.0000 8.4000 1.6e+00 10.00 2.100 7.100 2.100 7.9 0.0062 1.300
5  4.000 0.0000 0.0000 8.4000 1.6e+00 10.00 2.100 7.100 2.100 7.9 0.0062 1.300
9  0.500 1.6000 1.6000 2.6000 0.0e+00  3.70 0.025 1.900 0.028 2.4 1.4000 0.022
18 0.680 7.9000 7.9000 0.0071 2.4e+00  0.15 1.900 0.025 1.900 0.0 7.5000 2.800
20 3.700 0.0062 0.0062 8.0000 1.4e+00  9.70 1.800 6.700 1.900 7.5 0.0000 1.100
22 0.550 1.6000 1.6000 2.7000 1.0e-03  3.80 0.036 2.000 0.040 2.5 1.4000 0.013
24 0.500 1.6000 1.6000 2.6000 2.8e-05  3.70 0.023 1.900 0.027 2.3 1.5000 0.023
30 1.100 0.8900 0.8900 3.8000 1.1e-01  5.10 0.240 2.900 0.260 3.5 0.7500 0.036
31 0.093 2.8000 2.8000 1.5000 1.6e-01  2.30 0.061 0.950 0.056 1.3 2.6000 0.310
32 1.100 0.8900 0.8900 3.8000 1.1e-01  5.10 0.240 2.900 0.260 3.5 0.7500 0.036
      16    17    19   21    23     25    26   27      28    29
3  2.300 1.300 0.017 0.64 2.200 7.7000  0.12 2.80 1.6e+00 0.890
5  2.300 1.300 0.017 0.64 2.200 7.7000  0.12 2.80 1.6e+00 0.890
9  0.054 0.015 2.000 0.23 0.036 2.2000  2.60 0.16 2.8e-05 0.110
18 1.700 2.700 8.700 4.10 1.800 0.0018 10.00 1.30 2.3e+00 3.500
20 2.000 1.200 0.044 0.52 1.900 7.3000  0.18 2.60 1.5e+00 0.750
22 0.069 0.008 1.900 0.20 0.049 2.3000  2.50 0.19 1.4e-03 0.093
24 0.051 0.016 2.000 0.23 0.034 2.2000  2.60 0.16 0.0e+00 0.120
30 0.320 0.047 1.200 0.02 0.280 3.4000  1.60 0.55 1.2e-01 0.000
31 0.030 0.280 3.300 0.78 0.047 1.2000  4.10 0.00 1.6e-01 0.550
32 0.320 0.047 1.200 0.02 0.280 3.4000  1.60 0.55 1.2e-01 0.000

> mahal.dist(pr~cap, nuclear,
+            inverse.cov=matrix(1,1,1,dimnames=list("cap", "cap")))
$m
        1      2      4      6     7      8    10     11    12     13     14
3  140000      0      0 300000 59000 370000 75000 260000 76000 290000    220
5  140000      0      0 300000 59000 370000 75000 260000 76000 290000    220
9   18000  59000  59000  95000     0 130000   900  69000  1000  85000  52000
18  25000 290000 290000    260 85000   5300 69000    900 68000      0 270000
20 130000    220    220 290000 52000 350000 67000 240000 68000 270000      0
22  20000  56000  56000  99000    36 140000  1300  72000  1400  89000  49000
24  18000  60000  60000  94000     1 130000   840  68000   960  85000  52000
30  40000  32000  32000 140000  4100 180000  8800 110000  9200 130000  27000
31   3400 100000 100000  53000  5900  83000  2200  34000  2000  46000  93000
32  40000  32000  32000 140000  4100 180000  8800 110000  9200 130000  27000
       15    16    17     19     21    23     25     26     27    28     29
3   46000 82000 48000    620  23000 78000 280000   4200 100000 60000  32000
5   46000 82000 48000    620  23000 78000 280000   4200 100000 60000  32000
9     780  1900   530  72000   8300  1300  81000  95000   5900     1   4100
18 100000 62000 99000 310000 150000 66000     64 360000  46000 85000 130000
20  40000 74000 42000   1600  19000 70000 260000   6400  93000 52000  27000
22    480  2500   290  69000   7200  1800  84000  91000   6900    49   3400
24    840  1800   580  72000   8500  1200  80000  95000   5800     0   4200
30   1300 12000  1700  42000    730 10000 120000  60000  20000  4200      0
31  11000  1100 10000 120000  28000  1700  43000 150000      0  5800  20000
32   1300 12000  1700  42000    730 10000 120000  60000  20000  4200      0

> mahal.dist(pr~date+cum.n, nuclear)
$m
       1    2      4     6     7     8    10    11    12   13    14    15    16
3   4.10  0.0  3.000  0.33 0.710 1.600 1.100 1.700 1.900 1.40 2.400  5.50 1.200
5   0.32  3.0  0.000  2.60 2.000 5.500 4.400 4.500 3.100 4.70 3.100  0.82 3.900
9   2.50  1.1  2.600  0.24 0.084 0.550 0.260 0.250 0.100 0.31 0.240  3.20 0.140
18  4.60  1.4  4.700  0.49 0.570 0.035 0.011 0.031 0.390 0.00 0.610  5.50 0.035
20  1.90  2.5  2.600  1.00 0.540 1.200 0.880 0.620 0.097 0.87 0.035  2.20 0.610
22  5.30 14.0  8.200 10.00 8.200 9.700 9.200 8.000 5.900 9.00 5.100  4.00 8.400
24 11.00  9.0 13.000  6.30 6.000 3.100 3.700 3.000 3.600 3.40 3.500 11.00 3.700
30  0.54  2.6  0.033  2.40 1.900 5.300 4.200 4.400 3.100 4.50 3.200  1.20 3.800
31  1.70  1.8  0.600  2.30 2.100 5.500 4.400 4.800 3.900 4.80 4.200  2.80 4.100
32  0.54  2.6  0.033  2.40 1.900 5.300 4.200 4.400 3.100 4.50 3.200  1.20 3.800
    17   19    21  23    25     26    27     28     29
3  7.0 4.60  4.80 8.0 11.00 15.000  1.80  1.500  2.600
5  2.1 9.10  0.54 2.6  5.60  9.000  0.60  0.810  0.033
9  3.5 2.00  2.80 4.1  5.50  8.300  3.00  2.800  2.600
18 5.5 0.97  5.00 6.2  7.30 10.000  4.80  4.400  4.500
20 2.0 2.20  2.00 2.4  3.30  5.500  3.80  3.700  2.700
22 2.0 8.70  4.60 1.7  0.25  0.031 13.00 13.000  9.100
24 9.2 0.82 11.00 9.5  7.70  8.300 15.00 15.000 13.000
30 2.6 9.10  0.82 3.2  6.30 10.000  0.35  0.520  0.000
31 4.8 9.80  2.20 5.6  9.50 14.000  0.00  0.024  0.350
32 2.6 9.10  0.82 3.2  6.30 10.000  0.35  0.520  0.000

> mahal.dist(~date+cum.n, nuclear, pr~pt)
$`0`
       1    2    4     6     7     8    10    11    12   13    14    15    16
3   4.10  0.0  3.0  0.33 0.710 1.600 1.100 1.700 1.900 1.40 2.400  5.50 1.200
5   0.32  3.0  0.0  2.60 2.000 5.500 4.400 4.500 3.100 4.70 3.100  0.82 3.900
9   2.50  1.1  2.6  0.24 0.084 0.550 0.260 0.250 0.100 0.31 0.240  3.20 0.140
18  4.60  1.4  4.7  0.49 0.570 0.035 0.011 0.031 0.390 0.00 0.610  5.50 0.035
20  1.90  2.5  2.6  1.00 0.540 1.200 0.880 0.620 0.097 0.87 0.035  2.20 0.610
22  5.30 14.0  8.2 10.00 8.200 9.700 9.200 8.000 5.900 9.00 5.100  4.00 8.400
24 11.00  9.0 13.0  6.30 6.000 3.100 3.700 3.000 3.600 3.40 3.500 11.00 3.700
    17   19    21  23    25     26
3  7.0 4.60  4.80 8.0 11.00 15.000
5  2.1 9.10  0.54 2.6  5.60  9.000
9  3.5 2.00  2.80 4.1  5.50  8.300
18 5.5 0.97  5.00 6.2  7.30 10.000
20 2.0 2.20  2.00 2.4  3.30  5.500
22 2.0 8.70  4.60 1.7  0.25  0.031
24 9.2 0.82 11.00 9.5  7.70  8.300

$`1`
     27    28   29
30 0.35 0.520 0.00
31 0.00 0.024 0.35
32 0.35 0.520 0.00

> if ( (require(splines)) )
+   mahal.dist(pr~ns(date,df=3)+cum.n, nuclear)
Loading required package: splines
$m
      1    2    4    6     7      8     10    11   12    13     14   15     16
3  12.0  0.0 11.0  5.9  7.60  6.900  7.000  6.80  7.7  6.90  8.500 15.0  6.900
5   2.6 11.0  0.0  3.1  2.00  5.900  4.600  5.90  6.2  5.10  8.000  6.8  4.400
9   3.3  7.3  3.1  1.4  0.55  0.610  0.420  0.50  1.3  0.35  2.600  6.4  0.150
18  5.7  6.9  5.1  1.3  0.94  0.038  0.089  0.35  1.8  0.00  3.200  9.1  0.038
20  2.8  8.9  7.5  7.2  5.50  3.900  4.500  1.70  0.3  3.50  0.038  2.5  3.200
22 15.0 16.0 13.0 13.0 13.00 14.000 14.000 14.00 15.0 14.00 16.000 18.0 13.000
24 16.0  9.6 19.0 11.0 11.00  6.500  7.900  5.80  6.4  6.90  6.300 16.0  7.400
30  3.0  8.4  0.2  2.5  1.90  5.600  4.300  5.60  6.0  4.80  7.700  7.2  4.200
31  9.6  2.1  9.4  9.2 10.00 11.000 11.000  9.80  8.9 11.00  9.100 10.0 10.000
32  3.0  8.4  0.2  2.5  1.90  5.600  4.300  5.60  6.0  4.80  7.700  7.2  4.200
     17   19   21   23   25    26   27    28   29
3  15.0  8.8 13.0 14.0 12.0 19.00  2.1  2.20  8.4
5  10.0 15.0  4.7 10.0  9.1 16.00  9.4 12.00  0.2
9   8.1  5.4  4.8  8.4  7.7 16.00  9.5 12.00  3.0
18 10.0  4.4  7.3 11.0  9.1 17.00 11.0 13.00  4.8
20  2.4  2.6  2.3  2.7  6.1 20.00  9.0 10.00  7.4
22 16.0 18.0 17.0 14.0  3.2  0.33 17.0 19.00 13.0
24 13.0  2.5 16.0 13.0  8.1 15.00 15.0 16.00 18.0
30 10.0 14.0  5.1 10.0  8.7 15.00  7.1  9.80  0.0
31 11.0 13.0  9.8 11.0 11.0 21.00  0.0  0.23  7.1
32 10.0 14.0  5.1 10.0  8.7 15.00  7.1  9.80  0.0

> if (require(splines))
+   mahal.dist(~ns(date,df=3)+cum.n, nuclear, pr ~ pt)
$`0`
      1    2    4    6     7      8     10    11   12    13     14   15     16
3  12.0  0.0 11.0  5.9  7.60  6.900  7.000  6.80  7.7  6.90  8.500 15.0  6.900
5   2.6 11.0  0.0  3.1  2.00  5.900  4.600  5.90  6.2  5.10  8.000  6.8  4.400
9   3.3  7.3  3.1  1.4  0.55  0.610  0.420  0.50  1.3  0.35  2.600  6.4  0.150
18  5.7  6.9  5.1  1.3  0.94  0.038  0.089  0.35  1.8  0.00  3.200  9.1  0.038
20  2.8  8.9  7.5  7.2  5.50  3.900  4.500  1.70  0.3  3.50  0.038  2.5  3.200
22 15.0 16.0 13.0 13.0 13.00 14.000 14.000 14.00 15.0 14.00 16.000 18.0 13.000
24 16.0  9.6 19.0 11.0 11.00  6.500  7.900  5.80  6.4  6.90  6.300 16.0  7.400
     17   19   21   23   25    26
3  15.0  8.8 13.0 14.0 12.0 19.00
5  10.0 15.0  4.7 10.0  9.1 16.00
9   8.1  5.4  4.8  8.4  7.7 16.00
18 10.0  4.4  7.3 11.0  9.1 17.00
20  2.4  2.6  2.3  2.7  6.1 20.00
22 16.0 18.0 17.0 14.0  3.2  0.33
24 13.0  2.5 16.0 13.0  8.1 15.00

$`1`
    27   28  29
30 7.1 9.80 0.0
31 0.0 0.23 7.1
32 7.1 9.80 0.0

> cum.n.q <- cut(nuclear$cum.n, quantile(nuclear$cum.n), include.lowest=TRUE)
> mahal.dist(pr~date+cum.n.q, nuclear)
$m
      1    2      4     6     7   8     10   11    12  13    14   15  16   17
3   6.6  0.0 11.000  0.68 10.00 2.3  1.900 3.00 13.00 2.3 14.00  6.7 2.3  7.8
5  13.0 11.0  0.000  8.30 11.00 7.3  7.400 7.10 11.00 7.3 11.00 11.0 7.3  9.5
9  13.0 11.0 11.000  9.40  0.12 8.8  8.800 8.80  0.21 8.8  0.49 12.0 8.8 10.0
18  9.5  2.3  7.300  0.49  8.80 0.0  0.016 0.05  9.10 0.0  9.40  8.1 0.0  6.8
20 20.0 17.0  1.600 13.00 14.00 9.9 10.000 9.20 12.00 9.9 11.00 17.0 9.9 13.0
22 11.0 16.0 10.000 12.00 13.00 9.0  9.400 8.30 11.00 9.0 10.00  7.8 9.0  3.9
24 23.0 15.0 11.000  9.10 15.00 5.4  6.000 4.40 12.00 5.4 11.00 19.0 5.4 14.0
30 12.0  9.9  0.056  7.80 11.00 7.1  7.200 7.10 11.00 7.1 11.00 11.0 7.1  9.1
31  9.9  7.8  1.100  7.10 11.00 7.6  7.400 7.90 12.00 7.6 13.00  9.1 7.6  8.9
32 12.0  9.9  0.056  7.80 11.00 7.1  7.200 7.10 11.00 7.1 11.00 11.0 7.1  9.1
     19   21   23    25    26    27   28     29
3   6.6  6.6  8.3 12.00 17.00  7.80  8.8  9.900
5   7.6 12.0  9.1  9.00 11.00  1.10 15.0  0.056
9   9.6 12.0  9.9 10.00 13.00 11.00  3.0 11.000
18  1.1  8.8  6.6  7.30  9.70  7.60 11.0  7.100
20  7.5 19.0 12.0  9.50  8.80  5.40 21.0  2.300
22  6.8  9.2  3.0  0.49  0.05 14.00 20.0 11.000
24  1.6 21.0 13.0  8.70  6.90 16.00 24.0 12.000
30  8.0 11.0  8.9  9.30 11.00  0.65 14.0  0.000
31 10.0  9.5  9.0 11.00 15.00  0.00 12.0  0.650
32  8.0 11.0  8.9  9.30 11.00  0.65 14.0  0.000

> mahal.dist(~date+cum.n.q, nuclear, pr~pt)
$`0`
      1    2    4     6     7   8     10   11    12  13    14   15  16   17  19
3   6.6  0.0 11.0  0.68 10.00 2.3  1.900 3.00 13.00 2.3 14.00  6.7 2.3  7.8 6.6
5  13.0 11.0  0.0  8.30 11.00 7.3  7.400 7.10 11.00 7.3 11.00 11.0 7.3  9.5 7.6
9  13.0 11.0 11.0  9.40  0.12 8.8  8.800 8.80  0.21 8.8  0.49 12.0 8.8 10.0 9.6
18  9.5  2.3  7.3  0.49  8.80 0.0  0.016 0.05  9.10 0.0  9.40  8.1 0.0  6.8 1.1
20 20.0 17.0  1.6 13.00 14.00 9.9 10.000 9.20 12.00 9.9 11.00 17.0 9.9 13.0 7.5
22 11.0 16.0 10.0 12.00 13.00 9.0  9.400 8.30 11.00 9.0 10.00  7.8 9.0  3.9 6.8
24 23.0 15.0 11.0  9.10 15.00 5.4  6.000 4.40 12.00 5.4 11.00 19.0 5.4 14.0 1.6
     21   23    25    26
3   6.6  8.3 12.00 17.00
5  12.0  9.1  9.00 11.00
9  12.0  9.9 10.00 13.00
18  8.8  6.6  7.30  9.70
20 19.0 12.0  9.50  8.80
22  9.2  3.0  0.49  0.05
24 21.0 13.0  8.70  6.90

$`1`
     27 28   29
30 0.65 14 0.00
31 0.00 12 0.65
32 0.65 14 0.00

> ### should give error, incorrect mode
> try(mahal.dist(as.factor(pr)~cap, nuclear))
Error in mahal.dist(as.factor(pr) ~ cap, nuclear) : 
  Treatment variable should be logical or numeric
> 
